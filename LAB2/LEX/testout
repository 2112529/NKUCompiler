TOKEN: INT, LEXEME: int, ATTRIBUTE: Keyword
TOKEN: ID, LEXEME: main, column_number:6,ATTRIBUTE: 0x556fda0280a0 
TOKEN: LPAREN, LEXEME: (, ATTRIBUTE: Left Parenthesis
TOKEN: RPAREN, LEXEME: ), ATTRIBUTE: Right Parenthesis
TOKEN: LBRACE, LEXEME: {, ATTRIBUTE: Left Brace
TOKEN: INT, LEXEME: int, ATTRIBUTE: Keyword
TOKEN: ID, LEXEME: n, column_number:6,ATTRIBUTE: 0x556fda0280c0 
TOKEN: ASSIGN, LEXEME: =, ATTRIBUTE: Assignment Operator
TOKEN: INT_CONST, LEXEME: 29, ATTRIBUTE: 29
TOKEN: SEMICOLON, LEXEME: ;, ATTRIBUTE: Semicolon
TOKEN: BOOL, LEXEME: bool, ATTRIBUTE: Keyword
TOKEN: ID, LEXEME: isPrime, column_number:4,ATTRIBUTE: 0x556fda0280e0 
TOKEN: ASSIGN, LEXEME: =, ATTRIBUTE: Assignment Operator
TOKEN: TRUE, LEXEME: true, ATTRIBUTE: Keyword
TOKEN: SEMICOLON, LEXEME: ;, ATTRIBUTE: Semicolon
TOKEN: FOR, LEXEME: for, ATTRIBUTE: Keyword
TOKEN: LPAREN, LEXEME: (, ATTRIBUTE: Left Parenthesis
TOKEN: INT, LEXEME: int, ATTRIBUTE: Keyword
TOKEN: ID, LEXEME: i, column_number:10,ATTRIBUTE: 0x556fda028100 
TOKEN: ASSIGN, LEXEME: =, ATTRIBUTE: Assignment Operator
TOKEN: INT_CONST, LEXEME: 2, ATTRIBUTE: 2
TOKEN: SEMICOLON, LEXEME: ;, ATTRIBUTE: Semicolon
TOKEN: ID, LEXEME: i, column_number:14,ATTRIBUTE: 0x556fda028100 
TOKEN: LE, LEXEME: <=, ATTRIBUTE: Less Than or Equal Operator
TOKEN: ID, LEXEME: n, column_number:17,ATTRIBUTE: 0x556fda0280c0 
TOKEN: DIV, LEXEME: /, ATTRIBUTE: Division Operator
TOKEN: INT_CONST, LEXEME: 2, ATTRIBUTE: 2
TOKEN: SEMICOLON, LEXEME: ;, ATTRIBUTE: Semicolon
TOKEN: ID, LEXEME: i, column_number:21,ATTRIBUTE: 0x556fda028100 
TOKEN: INCREMENT, LEXEME: ++, ATTRIBUTE: Increment Operator
TOKEN: RPAREN, LEXEME: ), ATTRIBUTE: Right Parenthesis
TOKEN: LBRACE, LEXEME: {, ATTRIBUTE: Left Brace
TOKEN: IF, LEXEME: if, ATTRIBUTE: Keyword
TOKEN: LPAREN, LEXEME: (, ATTRIBUTE: Left Parenthesis
TOKEN: ID, LEXEME: n, column_number:5,ATTRIBUTE: 0x556fda0280c0 
TOKEN: MODULO, LEXEME: %, ATTRIBUTE: Modulo Operator
TOKEN: ID, LEXEME: i, column_number:7,ATTRIBUTE: 0x556fda028100 
TOKEN: EQ, LEXEME: ==, ATTRIBUTE: Equality Operator
TOKEN: INT_CONST, LEXEME: 0, ATTRIBUTE: 0
TOKEN: RPAREN, LEXEME: ), ATTRIBUTE: Right Parenthesis
TOKEN: LBRACE, LEXEME: {, ATTRIBUTE: Left Brace
TOKEN: ID, LEXEME: isPrime, column_number:0,ATTRIBUTE: 0x556fda0280e0 
TOKEN: ASSIGN, LEXEME: =, ATTRIBUTE: Assignment Operator
TOKEN: FALSE, LEXEME: false, ATTRIBUTE: Keyword
TOKEN: SEMICOLON, LEXEME: ;, ATTRIBUTE: Semicolon
TOKEN: BREAK, LEXEME: break, ATTRIBUTE: Keyword
TOKEN: SEMICOLON, LEXEME: ;, ATTRIBUTE: Semicolon
TOKEN: RBRACE, LEXEME: }, ATTRIBUTE: Right Brace
TOKEN: RBRACE, LEXEME: }, ATTRIBUTE: Right Brace
TOKEN: IF, LEXEME: if, ATTRIBUTE: Keyword
TOKEN: LPAREN, LEXEME: (, ATTRIBUTE: Left Parenthesis
TOKEN: ID, LEXEME: isPrime, column_number:5,ATTRIBUTE: 0x556fda0280e0 
TOKEN: RPAREN, LEXEME: ), ATTRIBUTE: Right Parenthesis
TOKEN: LBRACE, LEXEME: {, ATTRIBUTE: Left Brace
TOKEN: ID, LEXEME: cout, column_number:0,ATTRIBUTE: 0x556fda028120 
TOKEN: LSHIFT, LEXEME: <<, ATTRIBUTE: Left Shift Operator
TOKEN: ID, LEXEME: Yes, column_number:6,ATTRIBUTE: 0x556fda028140 
TOKEN: LSHIFT, LEXEME: <<, ATTRIBUTE: Left Shift Operator
TOKEN: ID, LEXEME: endl, column_number:11,ATTRIBUTE: 0x556fda028160 
TOKEN: SEMICOLON, LEXEME: ;, ATTRIBUTE: Semicolon
TOKEN: RBRACE, LEXEME: }, ATTRIBUTE: Right Brace
TOKEN: ELSE, LEXEME: else, ATTRIBUTE: Keyword
TOKEN: LBRACE, LEXEME: {, ATTRIBUTE: Left Brace
TOKEN: ID, LEXEME: cout, column_number:0,ATTRIBUTE: 0x556fda028120 
TOKEN: LSHIFT, LEXEME: <<, ATTRIBUTE: Left Shift Operator
TOKEN: ID, LEXEME: No, column_number:6,ATTRIBUTE: 0x556fda028180 
TOKEN: LSHIFT, LEXEME: <<, ATTRIBUTE: Left Shift Operator
TOKEN: ID, LEXEME: endl, column_number:10,ATTRIBUTE: 0x556fda028160 
TOKEN: SEMICOLON, LEXEME: ;, ATTRIBUTE: Semicolon
TOKEN: RBRACE, LEXEME: }, ATTRIBUTE: Right Brace
TOKEN: RETURN, LEXEME: return, ATTRIBUTE: Keyword
TOKEN: INT_CONST, LEXEME: 0, ATTRIBUTE: 0
TOKEN: SEMICOLON, LEXEME: ;, ATTRIBUTE: Semicolon
TOKEN: RBRACE, LEXEME: }, ATTRIBUTE: Right Brace
------------------
Symbol Table:
------------------
Lexeme: main
------------------
Stats:
      21      22     215
id0:INT int 0 0 (nil)
id1:ID main 6 0 0x556fda0280a0
id2:LPAREN ( 10 0 (nil)
id3:RPAREN ) 11 0 (nil)
id4:INT int 0 2 (nil)
id5:ID n 6 2 0x556fda0280c0
id6:DEC 29 8 2 0x1d
id7:SEMICOLON ; 10 2 (nil)
id8:BOOL bool 0 3 (nil)
id9:ID isPrime 4 3 0x556fda0280e0
id10:SEMICOLON ; 16 3 (nil)
id11:LPAREN ( 3 4 (nil)
id12:INT int 4 4 (nil)
id13:ID i 10 4 0x556fda028100
id14:DEC 2 12 4 0x2
id15:SEMICOLON ; 13 4 (nil)
id16:ID i 14 4 0x556fda028100
id17:ID n 17 4 0x556fda0280c0
id18:DEC 2 19 4 0x2
id19:SEMICOLON ; 20 4 (nil)
id20:ID i 21 4 0x556fda028100
id21:RPAREN ) 24 4 (nil)
id22:IF if 0 6 (nil)
id23:LPAREN ( 4 6 (nil)
id24:ID n 5 6 0x556fda0280c0
id25:ID i 7 6 0x556fda028100
id26:DEC 0 10 6 (nil)
id27:RPAREN ) 11 6 (nil)
id28:ID isPrime 0 8 0x556fda0280e0
id29:SEMICOLON ; 13 8 (nil)
id30:BREAK break 0 9 (nil)
id31:SEMICOLON ; 5 9 (nil)
id32:IF if 0 12 (nil)
id33:LPAREN ( 4 12 (nil)
id34:ID isPrime 5 12 0x556fda0280e0
id35:RPAREN ) 12 12 (nil)
id36:ID cout 0 14 0x556fda028120
id37:ID Yes 6 14 0x556fda028140
id38:ID endl 11 14 0x556fda028160
id39:SEMICOLON ; 15 14 (nil)
id40:ID cout 0 18 0x556fda028120
id41:ID No 6 18 0x556fda028180
id42:ID endl 10 18 0x556fda028160
id43:SEMICOLON ; 14 18 (nil)
id44:RETURN return 0 20 (nil)
id45:DEC 0 6 20 (nil)
id46:SEMICOLON ; 7 20 (nil)
